#lang racket

(require "../lex/token.rkt")
(require "types.rkt")

(define stx-identifier
  (syntax-item
   "identifier" 0
   (lambda (tok)
     (if (void? tok)
         #f
         (eq? (token-type tok) token-identifier)))))

(define stx-number
  (syntax-item
   "number" 0
   (lambda (tok)
     (if (void? tok)
         #f
     (eq? (token-type tok) token-number)))))

(define stx-string
  (syntax-item
   "string" 0
   (lambda (tok)
     (if (void? tok)
         #f
     (eq? (token-type tok) token-string)))))

; all the syntax below is generated by `gensyntax.py`

(define stx-keyword-and
 (syntax-item
  "keyword-and" 0
  (lambda (tok)
     (if (void? tok)
         #f
    (and (eq? (token-type tok) token-keyword)
        (eq? (token-attribute tok) "and"))))))
    

(define stx-keyword-begin
 (syntax-item
  "keyword-begin" 0
  (lambda (tok)
     (if (void? tok)
         #f
    (and (eq? (token-type tok) token-keyword)
        (eq? (token-attribute tok) "begin"))))))
    

(define stx-keyword-div
 (syntax-item
  "keyword-div" 0
  (lambda (tok)
     (if (void? tok)
         #f
    (and (eq? (token-type tok) token-keyword)
        (eq? (token-attribute tok) "div"))))))
    

(define stx-keyword-do
 (syntax-item
  "keyword-do" 0
  (lambda (tok)
     (if (void? tok)
         #f
    (and (eq? (token-type tok) token-keyword)
        (eq? (token-attribute tok) "do"))))))
    

(define stx-keyword-else
 (syntax-item
  "keyword-else" 0
  (lambda (tok)
     (if (void? tok)
         #f
    (and (eq? (token-type tok) token-keyword)
        (eq? (token-attribute tok) "else"))))))
    

(define stx-keyword-end
 (syntax-item
  "keyword-end" 0
  (lambda (tok)
     (if (void? tok)
         #f
    (and (eq? (token-type tok) token-keyword)
        (eq? (token-attribute tok) "end"))))))
    

(define stx-keyword-for
 (syntax-item
  "keyword-for" 0
  (lambda (tok)
     (if (void? tok)
         #f
    (and (eq? (token-type tok) token-keyword)
        (eq? (token-attribute tok) "for"))))))
    

(define stx-keyword-function
 (syntax-item
  "keyword-function" 0
  (lambda (tok)
     (if (void? tok)
         #f
    (and (eq? (token-type tok) token-keyword)
        (eq? (token-attribute tok) "function"))))))
    

(define stx-keyword-if
 (syntax-item
  "keyword-if" 0
  (lambda (tok)
     (if (void? tok)
         #f
    (and (eq? (token-type tok) token-keyword)
        (eq? (token-attribute tok) "if"))))))
    

(define stx-keyword-in
 (syntax-item
  "keyword-in" 0
  (lambda (tok)
     (if (void? tok)
         #f
    (and (eq? (token-type tok) token-keyword)
        (eq? (token-attribute tok) "in"))))))
    

(define stx-keyword-nil
 (syntax-item
  "keyword-nil" 0
  (lambda (tok)
     (if (void? tok)
         #f
    (and (eq? (token-type tok) token-keyword)
        (eq? (token-attribute tok) "nil"))))))
    

(define stx-keyword-not
 (syntax-item
  "keyword-not" 0
  (lambda (tok)
     (if (void? tok)
         #f
    (and (eq? (token-type tok) token-keyword)
        (eq? (token-attribute tok) "not"))))))
    

(define stx-keyword-of
 (syntax-item
  "keyword-of" 0
  (lambda (tok)
     (if (void? tok)
         #f
    (and (eq? (token-type tok) token-keyword)
        (eq? (token-attribute tok) "of"))))))
    

(define stx-keyword-procedure
 (syntax-item
  "keyword-procedure" 0
  (lambda (tok)
     (if (void? tok)
         #f
    (and (eq? (token-type tok) token-keyword)
        (eq? (token-attribute tok) "procedure"))))))
    

(define stx-keyword-program
 (syntax-item
  "keyword-program" 0
  (lambda (tok)
     (if (void? tok)
         #f
    (and (eq? (token-type tok) token-keyword)
        (eq? (token-attribute tok) "program"))))))
    

(define stx-keyword-repeat
 (syntax-item
  "keyword-repeat" 0
  (lambda (tok)
     (if (void? tok)
         #f
    (and (eq? (token-type tok) token-keyword)
        (eq? (token-attribute tok) "repeat"))))))
    

(define stx-keyword-set
 (syntax-item
  "keyword-set" 0
  (lambda (tok)
     (if (void? tok)
         #f
    (and (eq? (token-type tok) token-keyword)
        (eq? (token-attribute tok) "set"))))))
    

(define stx-keyword-then
 (syntax-item
  "keyword-then" 0
  (lambda (tok)
     (if (void? tok)
         #f
    (and (eq? (token-type tok) token-keyword)
        (eq? (token-attribute tok) "then"))))))
    

(define stx-keyword-to
 (syntax-item
  "keyword-to" 0
  (lambda (tok)
     (if (void? tok)
         #f
    (and (eq? (token-type tok) token-keyword)
        (eq? (token-attribute tok) "to"))))))
    

(define stx-keyword-until
 (syntax-item
  "keyword-until" 0
  (lambda (tok)
     (if (void? tok)
         #f
    (and (eq? (token-type tok) token-keyword)
        (eq? (token-attribute tok) "until"))))))
    

(define stx-keyword-var
 (syntax-item
  "keyword-var" 0
  (lambda (tok)
     (if (void? tok)
         #f
    (and (eq? (token-type tok) token-keyword)
        (eq? (token-attribute tok) "var"))))))
    

(define stx-keyword-while
 (syntax-item
  "keyword-while" 0
  (lambda (tok)
     (if (void? tok)
         #f
    (and (eq? (token-type tok) token-keyword)
        (eq? (token-attribute tok) "while"))))))
    

(define stx-relop-leq
 (syntax-item
  "keyword-leq" 0
  (lambda (tok)
     (if (void? tok)
         #f
    (and (eq? (token-type tok) token-relop)
        (eq? (token-attribute tok) "leq"))))))
    

(define stx-relop-geq
 (syntax-item
  "keyword-geq" 0
  (lambda (tok)
     (if (void? tok)
         #f
    (and (eq? (token-type tok) token-relop)
        (eq? (token-attribute tok) "geq"))))))
    

(define stx-relop-lt
 (syntax-item
  "keyword-lt" 0
  (lambda (tok)
     (if (void? tok)
         #f
    (and (eq? (token-type tok) token-relop)
        (eq? (token-attribute tok) "lt"))))))
    

(define stx-relop-gt
 (syntax-item
  "keyword-gt" 0
  (lambda (tok)
     (if (void? tok)
         #f
    (and (eq? (token-type tok) token-relop)
        (eq? (token-attribute tok) "gt"))))))
    

(define stx-relop-neq
 (syntax-item
  "keyword-neq" 0
  (lambda (tok)
     (if (void? tok)
         #f
    (and (eq? (token-type tok) token-relop)
        (eq? (token-attribute tok) "neq"))))))
    

(define stx-relop-eq
 (syntax-item
  "keyword-eq" 0
  (lambda (tok)
     (if (void? tok)
         #f
    (and (eq? (token-type tok) token-relop)
        (eq? (token-attribute tok) "eq"))))))
    

(define stx-relop-assign
 (syntax-item
  "keyword-assign" 5
  (lambda (tok)
     (if (void? tok)
         #f
    (and (eq? (token-type tok) token-relop)
        (eq? (token-attribute tok) "assign"))))))
    

(define stx-relop-double-dot
 (syntax-item
  "keyword-double-dot" 0
  (lambda (tok)
     (if (void? tok)
         #f
    (and (eq? (token-type tok) token-relop)
        (eq? (token-attribute tok) "double-dot"))))))
    

(define stx-relop-dot
 (syntax-item
  "keyword-dot" 0
  (lambda (tok)
     (if (void? tok)
         #f
    (and (eq? (token-type tok) token-relop)
        (eq? (token-attribute tok) "dot"))))))
    

(define stx-relop-plus
 (syntax-item
  "keyword-plus" 0
  (lambda (tok)
     (if (void? tok)
         #f
    (and (eq? (token-type tok) token-relop)
        (eq? (token-attribute tok) "plus"))))))
    

(define stx-relop-minus
 (syntax-item
  "keyword-minus" 0
  (lambda (tok)
     (if (void? tok)
         #f
    (and (eq? (token-type tok) token-relop)
        (eq? (token-attribute tok) "minus"))))))
    

(define stx-relop-multi
 (syntax-item
  "keyword-multi" 1
  (lambda (tok)
     (if (void? tok)
         #f
    (and (eq? (token-type tok) token-relop)
        (eq? (token-attribute tok) "multi"))))))
    

(define stx-relop-divide
 (syntax-item
  "keyword-divide" 1
  (lambda (tok)
     (if (void? tok)
         #f
    (and (eq? (token-type tok) token-relop)
        (eq? (token-attribute tok) "divide"))))))
    

(define stx-sep-square-lbracket
 (syntax-item
  "keyword-square-lbracket" 0
  (lambda (tok)
     (if (void? tok)
         #f
    (and (eq? (token-type tok) token-sep)
        (eq? (token-attribute tok) "square-lbracket"))))))
    

(define stx-sep-colon
 (syntax-item
  "keyword-colon" 0
  (lambda (tok)
     (if (void? tok)
         #f
    (and (eq? (token-type tok) token-relop)
        (eq? (token-attribute tok) "colon"))))))
    

(define stx-sep-square-rbracket
 (syntax-item
  "keyword-square-rbracket" 0
  (lambda (tok)
     (if (void? tok)
         #f
    (and (eq? (token-type tok) token-sep)
        (eq? (token-attribute tok) "square-rbracket"))))))
    

(define stx-sep-rbracket
 (syntax-item
  "keyword-rbracket" 0
  (lambda (tok)
     (if (void? tok)
         #f
    (and (eq? (token-type tok) token-sep)
        (eq? (token-attribute tok) "rbracket"))))))
    

(define stx-sep-lbracket
 (syntax-item
  "keyword-lbracket" 0
  (lambda (tok)
     (if (void? tok)
         #f
    (and (eq? (token-type tok) token-sep)
        (eq? (token-attribute tok) "lbracket"))))))
    

(define stx-sep-semicolon
 (syntax-item
  "keyword-semicolon" 0
  (lambda (tok)
     (if (void? tok)
         #f
    (and (eq? (token-type tok) token-sep)
        (eq? (token-attribute tok) "semicolon"))))))
    

(define stx-sep-comma
 (syntax-item
  "keyword-comma" 0
  (lambda (tok)
     (if (void? tok)
         #f
    (and (eq? (token-type tok) token-sep)
        (eq? (token-attribute tok) "comma"))))))
    

(provide (all-defined-out))

(provide (all-from-out))